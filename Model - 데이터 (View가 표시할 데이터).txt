Model - 데이터 (View가 표시할 데이터)
		데이터를 획득하는 과정(업무로직 수행 작업, 데이터 베이스 엑세스 작업)에서
		실행되는 자바 클래스 저눕
		자바클래스(Service, Dao, Vo 등)
View - Model에 포함된 데이터의 표현을 담당, jsp
Contoller -  클라이언트의 요청 처리를 담당,Controller클래스 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

MVC패턴 
	- 애플리케이션을 Model-View-Contoller로 역할을 나누어서 개발하는 방식이다.
	- 구성
		Model(데이터를담당)
			- View에 표현할 데이터
			- View에 표현할 데이터를 획득하는 작업
		View(데이터를 표현)
			- Model이 제공하는 데이터 표현
			- Model이 제공하는 데이터를 다양한 컨텐츠 타입으로 변환(HTML 컨텐츠, XML컨텐츠, JSON컨텐츠)하는과정
		Contoller(상호작용)
			- 클라이언트(최종사용자)의 요청을 처리
			- 사용자와 상호작용
	- 목적 : 
		-데이터와 비즈니스 로직을 시각적인 표현(디자인 요소)으로부터 분리해 줌으로써 화면에 신경쓰지 않고   
		  데이터나 비즈니스 로직을 구성 할수 있다. 
	- 적용사례
		- Model2 개발방식
			- 웹 애플리케이션 개발에 MVC 패턴을 적용한 것
		- Spring MVC
			- 스프링 MVC는 MVC 패턴의 웹 어플리케이션 개발을 지원하는 다양한 라이브러리를 제공한다.
		- python의 django
			- python의 django도 MVC패턴의 웹 어플리케이션 개발을 지원하는 프레임워크다.
		- struts, struts2(지금은 사용하지 않음) Spring MVC 나오기 이전에는 가장많이 사용되었음)
			- MVC 패턴의 웹애플리케이션 지원 프레임 워크(Spring 등장 이전에 사용했던 프레임워크다.)

Model2 개발방식
		- 웹애플리케이션 개발에 MVC 패턴을 적용한것
		- 목적
			자바코드(비지니스로직)와 디자인코드(HTML 코드)를 분리해서 개발하기 위해서 도입되었다.
		- 구성
			Model
				- 비지니스 로직수행 (업무로직 수행), 데이터베이스 엑세스 담당
				- 자바 클래스로 구현!
			View
				- 모델이 제공하는 데이터를 표현한다.
				- jsp로 구현한다.
				
			Controller (클라이언트의 요청을 접수)
				- 클라이언트의 HTTP요청 처리
				- 서블릿과 자바 클래스로 구현한다.

MVC의 한계
View는 Controller에 연결되어 화면을 구성하므로 다수의 View를 가질 수 있다. Model은 Controller를 통해 View와 연결되지만 Controller를 통해서 하나의 View에 연결되는 Model도 다수가 될 수 있다. 이렇게 화면과 데이터가 복잡해지면 하나의 Controller에 다수의 View와 Model이 연결되게 된다. 이럴 경우 MVC가 너무 복잡해지면서 비대해지기 때문에 새 기능을 추가할 때마다 크고 작은 문제점을 가지면서 소스 분석이 어려워지는데 이러한 MVC를 대규모 MVC 애플리케이션이라고 한다. 최근에는 이런 문제점을 보완하는 다양한 패턴들이 생겨나고 있는 중이다.


* 거의 vo에는 _를 붙이지 않는다.!!!


forward 내부이동 시켜준다(브라우저 주소창의 주소가 바꾸지 않는다) vs send.redirect 외부로이동시켜줌(새로 요청을)
		ex 내부에서 이동시켜주는것 							다시 주소를 바꿔서 주는것

요청 하는것이 자바에 그대로 요청,응답 - > jsp로 그대로 이동한다.

		
요청파라미터로는 담을수가 없다.(값의 종류는 문자밖에 안됨)
속성은 객체를 담을수 있다.(모든것을 담을수 있다.)

전달 : 요청객체의 속성을 담아서 전달해준다.
그럼 뷰에서 꺼내서 사용이 가능하다.


session 에담아 두면 오랫동안유지 되므로 메모리가 많아짐(청소가 되지 않음)
request 는 응답하면 자동으로 사라진다(청소가된다)


잘못적어도 오류가 나지 않는다.  값이 표현이 안된다.
el 표현식은 심플하지만 오류가 어디서 낫는지 찾을수가없다.


FrontController로 Controller 


FrontController = 클라이언트 요청처리 
			   클라이언트의 요청접수
			   뷰 페이지로 내부이동
			이것만  프론트 컨트롤러에서 수행하고

나머지 업무로직, 데이터 획득, 데이터 이동경로는 컨트롤러를 만든다.



컨트롤러
@Controller
@RequestMapping(path = "/user")

Class UserController{
	@RequestMapping(path = "/register")
	public String form(req, resp) {
	// 회원가입화면 제공
		return "user/form.jsp";
	}
		@RequestMapping(path = "/register", method="HttpMethod.POST)
		public String register(req, resp)
		// 회원가입처리(요청파라미터 조회, User객체 생성/값 담기, Dao 전달해서 저장시키기)
		return "redirect:completed"

	}	


	@RequestMapping (path = "/completed)
	public String completed (req, resp) {
		//회원 가입 완료 화면 제공
		return "user/completed.jsp";
	}
}






























































		